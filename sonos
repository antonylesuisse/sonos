#!/usr/bin/env python3
# by Antony Lesuisse 2020, public domain
import os
import re
import select
import subprocess
import sys

import soco  # type: ignore[import]


def run(cmd: str, shell: bool = False) -> str:
    print(cmd)
    if '|' in cmd:
        shell = True
    else:
        cmd = cmd.split(' ')
    output = subprocess.check_output(cmd, shell=shell).decode('utf8')
    return output


def soco_discover() -> soco.core.SoCo:
    device = list(soco.discover())[0]
    print(device.get_speaker_info())
    return device


def soco_play(sonos: soco.core.SoCo, volume: int) -> None:
    ip_addr = run(
        'ip addr show scope global | grep "inet "  |cut -d" " -f6| cut -d/ -f1 | head -1'
    ).strip()
    if not sonos.get_current_track_info()['uri'].endswith('pc.flac'):
        sonos.clear_queue()
        sonos.add_uri_to_queue('http://%s:8888/pc.flac' % ip_addr)
        sonos.play_from_queue(0)
    sonos.volume = volume
    sonos.play()


def soco_volume(sonos: soco.core.SoCo) -> None:
    output = run('amixer sget Master,0')
    line = re.findall(r' \[([0-9]*)%\] ', output)
    volume = int(line[0])
    if volume != 75:
        volume_delta = volume - 75
        print('local volume is %s delta 75 %s' % (volume, volume_delta))
        sonos_volume = sonos.volume
        sonos.volume = sonos_volume + volume_delta
        print('volume from sv %s to %s:' % (sonos_volume, sonos_volume + volume_delta))
        run('pactl set-sink-volume Sonos 75%')


def pa_sink_load() -> None:
    output = run('pactl list sinks short')
    if not 'Sonos' in output:
        sink = run("pactl list sinks short | awk '{print $2}'| head -1").strip()
        run(
            'pacmd load-module module-combine-sink sink_name=Sonos sink_properties=device.description=Sonos slaves=%s channels=2'
            % sink
        )
        run('pactl set-sink-volume Sonos 75%')
        run('pactl set-sink-volume %s 0%%' % sink)
        run('pactl set-default-sink Sonos')


def pa_sink_unload() -> None:
    sink = run("pactl list sinks short | awk '{print $2}'| head -1").strip()
    run('pactl set-default-sink %s' % sink)
    run('pacmd unload-module module-combine-sink')


def vlc() -> subprocess.Popen:  # type: ignore[type-arg]
    command = "/usr/bin/cvlc -vvv pulse://Sonos.monitor --sout #transcode{vcodec=none,acodec=flac,ab=1441,channels=2,samplerate=44100,scodec=none}:standard{access=http,dst=0.0.0.0:8888/pc.flac}"
    proc = subprocess.Popen(
        command.split(" "),
        stdout=subprocess.PIPE,
        stderr=subprocess.PIPE,
    )
    return proc


def silence() -> subprocess.Popen:  # type: ignore[type-arg]
    # very light Pink noise to avoid sonos to cut when there is silence
    # c="ffplay -loglevel 24 -nodisp -autoexit -f lavfi -i anullsrc=r=44100:cl=mono"
    command = "ffplay -loglevel 24 -nodisp -autoexit -f lavfi -i anoisesrc=c=pink:r=44100:a=0.001"
    proc = subprocess.Popen(
        command.split(" "),
        stdout=subprocess.PIPE,
        stderr=subprocess.PIPE,
    )
    return proc


def main() -> None:
    pa_sink_load()
    vlc_proc = vlc()
    silence_proc = silence()
    sonos = soco_discover()
    volume = 45
    if len(sys.argv) > 1:
        volume = int(sys.argv[1])
    soco_play(sonos, volume)
    fds = [vlc_proc.stdout.fileno(), vlc_proc.stderr.fileno()]
    try:
        while 1:
            ret = select.select(fds, [], [])
            for descriptor in ret[0]:
                buf = os.read(descriptor, 8192).decode('utf8')
                print(buf)
                if 'sink' in buf:
                    soco_volume(sonos)
    except KeyboardInterrupt as error:
        print('Catched %r' % error)
        print('killing vlc')
        vlc_proc.terminate()
        os.system('killall ffplay')
        print('killing ffplay')
        silence_proc.terminate()
        os.system('killall vlc')
        print('unload pasink')
        pa_sink_unload()


main()
